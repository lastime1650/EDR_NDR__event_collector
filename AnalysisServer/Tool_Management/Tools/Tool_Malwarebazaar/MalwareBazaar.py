from typing import Optional, Dict

import requests
import json

import threading, queue

class MalwareBazaar:
    def __init__(self):
        pass

    def SHA256_query_get_info(self, SHA256:str)->queue.Queue:

        returning_queue = queue.Queue()

        api_url = "https://mb-api.abuse.ch/api/v1/"
        payload_data = {
            "query": "get_info",
            "hash": SHA256
        }

        threading.Thread(target=self.POST_QUERY, args=(returning_queue, api_url, payload_data)).start()

        return returning_queue




    def POST_QUERY(self, returning_queue:queue.Queue, api_url:str, payload_data:dict):
        try:
            response = requests.post(api_url, data=payload_data)
            response.raise_for_status()  # HTTP 오류 발생 시 예외 발생

            json_response = response.json()
            #if json_response["query_status"] == "no_results":
                #return {"query_status":}

            #return json_response
            json_response = dict(json_response)

            # 결과 체크 ( 실패 처리 )
            if "query_status" in json_response:
                if json_response["query_status"] == "no_results" or json_response["query_status"] == "hash_not_found":
                    returning_queue.put(None)
                    return

            # 결과가 없으면 -> "{'query_status': 'hash_not_found'}"
            #print(json_response)

            try:
                # 불필요한 key 제거
                drop_keys = ("sha256_hash", "sha3_384_hash","sha1_hash", "md5_hash")
                for index, i in enumerate( json_response["data"] ):
                    try:
                        for drop_key in drop_keys:
                            del json_response["data"][index][drop_key]
                    except:
                        pass
            except:
                # 오류가 발생한 경우도, 그대로 반환
                pass

            returning_queue.put({"MalwareBazaar_response":json_response})

        except requests.exceptions.RequestException as e:
            print(f"Error during API request: {e}")
            #return None
            returning_queue.put({"MalwareBazaar_response":"MalwareBazaar로부터 해당 바이너리 정보가 존재하지 않습니다."})

        return
'''print(
     MalwareBazaar().SHA256_query_get_info(
        "7a1d47b6f3c6d03bf7da12a84360ec19edeca08292c3b60156f8063ee639f1ac"
    ).get()
)'''