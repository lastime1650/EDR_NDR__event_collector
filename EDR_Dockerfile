# 빌드 단계

# go 빌드전용 이미지
FROM golang:1.23 as builder



WORKDIR /CoreServer

COPY CoreServer2/go.mod ./

RUN go mod download
COPY CoreServer2 .
RUN CGO_ENABLED=0 GOOS=linux go build -o run_coreserver

# 실행 단계
# 경량 alpine으로 하기엔 성능이 느림
FROM  rockylinux:9

RUN dnf update -y && \
    dnf install -y  NetworkManager bind-utils tzdata && \
    dnf clean all

ENV TZ=Asia/Seoul

# go 빌드
WORKDIR /CoreServer

COPY --from=builder /CoreServer/run_coreserver .



# Python + util 설치
RUN dnf install -y python3 python3-pip **python3-devel** && \ 
    dnf install -y openssl && \ 
    dnf install -y net-tools && \ 
    dnf clean all # 설치 후 캐시 정리


### 분석 서버 설치 시작 ###
WORKDIR /docker__AnalysisServer

# requirement.txt 설치
COPY AnalysisServer/requirements.txt .
RUN pip3 install --no-cache-dir -r requirements.txt

# Analysis Server 파이썬스크립트 복사
COPY AnalysisServer/ .

### 분석 서버 설치 끝  ###


### 웹 서버 설치 시작 ###
WORKDIR /docker__WEBserver

# requirement.txt 설치
COPY WEBserver/requirements.txt .
RUN pip3 install --no-cache-dir -r requirements.txt

# WEBserver 파이썬스크립트 복사
COPY WEBserver/ .

### 웹 서버 설치 끝  ###


# 최상위 루트로 이동
WORKDIR /

#CMD ["./run_coreserver"]
# 절대경로로 모두 실행하는게 좋음


# 1. Core Server ( EDR )
# 2. Analysis Server ( EDR )
# 3. WEB server

# CMD ["/bin/bash", "-c", "/CoreServer/run_coreserver & python3 /docker__AnalysisServer/main.py &  " ]


CMD ["/bin/bash", "-c", "/CoreServer/run_coreserver & python3 /docker__AnalysisServer/main.py"] 


# # & python3 /docker__WEBserver/main.py"]