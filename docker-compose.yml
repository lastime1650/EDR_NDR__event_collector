# docker-compose.yml (모든 서비스를 host 네트워크로 변경)

# networks: # network_mode: "host" 사용 시 별도 네트워크 정의 불필요
#   kafka-net:
#     driver: bridge

services:
  # 1. Zookeeper 서비스
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper # host 네트워크에서는 의미가 약해지지만, 컨테이너 내부 식별용으로 유지 가능
    network_mode: "host" # !!!! 호스트 네트워크 사용 !!!!
    # ports: # network_mode: "host"에서는 무의미
    #   - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 # 이 포트는 호스트의 2181 포트가 됨
      ZOOKEEPER_TICK_TIME: 2000

  # 2. Kafka 서비스
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: kafka
    network_mode: "host" # !!!! 호스트 네트워크 사용 !!!!
    # ports: # network_mode: "host"에서는 무의미
    #   - "9092:9092"
    #   - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181' # !!!! 변경: zookeeper 서비스가 호스트의 2181 포트 사용 !!!!
      # !!!! KAFKA_ADVERTISED_LISTENERS 설정은 호스트 IP 또는 localhost를 사용하도록 대폭 수정 필요 !!!!
      # 예시: KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092 (단일 리스너 사용 또는 실제 호스트 IP 사용)
      # 기존 PLAINTEXT_HOST 개념이 불필요해질 수 있음.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092 # !!!! 중요: 외부에서 접근 가능한 호스트 IP/localhost와 포트로 변경 !!!!
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: '10485760'
      KAFKA_REPLICA_FETCH_MAX_BYTES: '10485760'
      KAFKA_FETCH_MESSAGE_MAX_BYTES: '10485760'

  # 3. Kafka UI 서비스
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    network_mode: "host" # !!!! 호스트 네트워크 사용 !!!!
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'localhost:9092' # !!!! 변경: Kafka가 호스트의 9092 포트 사용 !!!!
      SERVER_PORT: 8082
      # KAFKA_CLUSTERS_0_ZOOKEEPER: 'localhost:2181' # !!!! 필요시 변경 !!!!

  # 4. Elasticsearch 서비스
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.4
    container_name: elasticsearch
    hostname: elasticsearch
    network_mode: "host" # !!!! 호스트 네트워크 사용 !!!!
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=1234
      - xpack.security.enabled=false # 개발용 보안 비활성화 유지
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck: # localhost로 접근하는 healthcheck는 그대로 유효할 수 있음
        test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
        interval: 8s
        timeout: 30s
        retries: 4
        start_period: 60s

  # 5. Logstash 서비스
  logstash:
    image: docker.elastic.co/logstash/logstash:8.17.4
    container_name: logstash
    hostname: logstash
    network_mode: "host" # !!!! 호스트 네트워크 사용 !!!!
    volumes:
      - ./logstash-config:/usr/share/logstash/pipeline:ro
    depends_on:
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
      config_reload_automatic: true
      HTTP_HOST: "0.0.0.0" # Logstash API가 호스트의 9600 포트에서 접근 가능
      xpack_security_enabled: false

  # 6. Kibana 서비스
  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.4
    container_name: kibana
    hostname: kibana
    network_mode: "host" # !!!! 호스트 네트워크 사용 !!!!
    # ports: # network_mode: "host"에서는 무의미. Kibana는 호스트의 5601 포트 사용
    #   - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["http://localhost:9200"]' # !!!! 변경: Elasticsearch가 호스트의 9200 포트 사용 !!!!
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: 1234
      ADMIN_PRIVILEGES: "true"
      xpack.features.shortenUrl.enable: false
      NODE_OPTIONS: "--max-old-space-size=4096"
    volumes:
      - kibana_data:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck: # localhost로 접근하는 healthcheck는 그대로 유효할 수 있음
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601/app/login | grep -q 'HTTP/1.1 200 OK' || curl -s -I http://localhost:5601/api/status | grep -q 'HTTP/1.1 200 OK'"]
      interval: 10s
      timeout: 60s
      retries: 6
      start_period: 60s

  # 7. MariaDB 서비스
  database:
    image: mariadb:10.7
    container_name: Database # hostname 제거 또는 유지 (내부 식별용)
    network_mode: "host" # !!!! 호스트 네트워크 사용 !!!!
    # ports: # network_mode: "host"에서는 무의미. MariaDB는 호스트의 3306 포트 사용 (기본 포트)
    #   - "3307:3306" # 만약 호스트의 3306이 사용 중이면 MariaDB 설정을 변경하여 다른 포트(예:3307)를 사용하게 해야 함.
    environment:
      MARIADB_ROOT_PASSWORD: 1234
      # MARIADB_DATABASE: EDR
      # MARIADB_USER: root
      # MARIADB_PASSWORD: 1234
    volumes:
      - db_data:/var/lib/mysql

  # 8. EDR 서비스
  edr:
    build:
      context: .
      dockerfile: ./EDR_Dockerfile
    container_name: EDR # hostname 제거 또는 유지 (내부 식별용)

    network_mode: "host" # !!!! 호스트 네트워크 사용 !!!!
    # === 절대 권한 부여 ===
    privileged: true
    # ======================

    environment:
      # !!!! DB_HOST, ELASTICSEARCH_HOST, KAFKA_HOST 모두 "localhost" 또는 실제 호스트 IP로 변경 필요 !!!!
      DB_HOST: "localhost" # MariaDB가 호스트의 (기본)3306 포트 사용 가정
      # DB_PORT: "3306" # MariaDB가 3306을 쓴다면 포트 명시 불필요. 다른 포트면 명시.

      ELASTICSEARCH_HOST: "localhost"
      # ELASTICSEARCH_PORT: "9200"

      # ANALYSIS_SERVER_HOST: "0.0.0.0" # 0.0.0.0은 보통 모든 인터페이스를 의미하므로 host 모드에서 유효할 수 있음
      # ANALYSIS_SERVER_PORT: "6060"

      WEBSOCKET_EXTERNAL_HOST: "192.168.0.1" # 이 설정은 외부 클라이언트용이므로 그대로 유지 가능
      # LOCAL_STORAGE_DIR: "./save_file"
    # ports: # network_mode: "host"에서는 무의미. EDR 서비스는 호스트의 10000, 10299, 8000, 6060 포트 사용
    #   - "10000:10000"
    #   - "10299:10299"
    #   - "8000:8000"
    #   - "6060:6060"
    depends_on: # 의존성 순서는 유지
      - kafka
      - zookeeper
      - elasticsearch
      - database
      - kibana
    volumes:
      - save_file:/CoreServer/save_file
  # 9. NDR 서비스
  # ndr:
  #  build:
  #    context: .
  #    dockerfile: ./NDR_Dockerfile
  #  container_name: NDR # hostname 제거 또는 유지 (내부 식별용)
  #
  #  network_mode: "host" # !!!! 호스트 네트워크 사용 !!!!
  #  # === 절대 권한 부여 ===
  # privileged: true
  #  # ======================
  #
  #  
  #  init: true
  #
  #  environment:
  #
  #
  #    ELASTICSEARCH_HOST: "localhost"
  #    # ELASTICSEARCH_PORT: "9200"
  #
  #
  #  volumes:
  #    - ./NDR/Suricata/rules:/docker__suricata/rules

# Docker Named Volumes 정의
volumes:
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local
  db_data:
    driver: local
  save_file:
    driver: local